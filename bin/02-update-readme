#! /usr/bin/env python3
import sys, os, glob, datetime, urllib

#####
#
# This script updates the README with the container tags
#
#####


#####
# Configuration
#####

# Repository name
repo = "terraria"

# Repository Slug
slug = "beardedio/terraria"

# The folder that is tagged "latest"
latest_folder = "vanilla"

# Docker Hub Description, Limit 100 Characters
short_description = "Docker images to run a Terraria Server. Images with TShock Server or Vanilla Server are available."

# Full description used in the readme.md
full_description = "Docker images to run a Terraria Server. Images with [TShock Server](https://github.com/Pryaxis/TShock) or [Vanilla Server](https://terraria.gamepedia.com/Server) are available."



# Change to script dir
abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

# Change to root of repo
os.chdir('..')

# Store repo dir
repodir = os.getcwd()



#####
## Build list of tags
#####
print("Generating tag list")
tags = ""

for filepath in sorted(glob.iglob(repodir+'/containers/*/[!latest]*'), reverse=True):
    os.chdir(filepath)

    version = os.path.basename(os.getcwd())
    folder = os.path.basename(os.path.abspath(os.getcwd()+"/../"))
    docker_tag = folder+"-"+version

    latest = ""
    latest_file = os.getcwd()+"/../latest"
    if os.path.exists(latest_file):
        with open(latest_file, 'r') as content_file:
            latest = content_file.read().strip()

    tags += "* "+docker_tag

    if latest == version:
        tags += ", "+folder+"-latest"

        if latest_folder == folder:
            tags += ", latest"

    tags += " [(containers/"+folder+"/"+version+"/Dockerfile)](https://github.com/"+slug+"/blob/master/containers/"+folder+"/"+version+"/Dockerfile)"
    tags += "\n"
tags = tags.strip()

print(tags+"\n")

# Return to repo dir
os.chdir(repodir)



#####
## Build full description
#####
print('Building full description')
with open('template/readme.template', 'r') as f:
    readme_contents = f.read()

readme_contents = readme_contents.replace("%%TAGS%%", tags)
readme_contents = readme_contents.replace("%%YEAR%%", datetime.datetime.now().strftime("%Y"))



#####
## Update readme.md
#####
print('Updating Readme.md')
header = "# "+repo+"\n\n"
header += full_description+"\n\n"
readme = header+readme_contents

with open('README.md','w') as f:
    f.write(readme)

print('Done')
